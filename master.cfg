# -*- python -*-
# ex: set syntax=python:
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import itertools
import os
import re
import json
import copy
import socket

# Global definition
artifactory_master="/srv/artifactory/buildbot"

# This class represents a single slave, which just stores some
# configuration information about that slave.
class Slave:
    def __init__(self, config):
        self._hostname = config["hostname"]
        self._password = config["password"]
        self._features = config["features"]

    def hostname(self):
        return self._hostname

    def password(self):
        return self._password

# Stores the entire list of slaves, 
class SlaveList:
    def __init__(self, directory):
        self._slaves = list()

	print os.getcwd()
        for filename in os.listdir(directory):
            print filename
            if filename.endswith(".json"):
                print "Loading slave config " + filename
                lines = open(directory + filename).read()
                slave = Slave(json.loads(lines))
                self._slaves.append(slave)

    def slaves(self):
        return self._slaves

# Contains a pattern that will be replaced in things like the
# configuration/target names -- this is just a little helper that
# provides names to the pattern/value mappings.
class Parameter:
    def __init__(self, pattern, value):
        self.pattern = pattern
        self.value = value

    def __str__(self):
        return "s!" + self.pattern + "!" + self.value + "!"

    def replace(self, source):
        return re.sub(self.pattern, self.value, source)

# Stores a single target, which is the sort of thing that will end up
# being built.  A project can form many of these if it has a lot of
# different parameters -- it's essentially the cartesian product of
# all the parameter values in a particular entry in a project's
# configuration list.  You can't directly create a target from the
# JSON file.
class Target:
    def __init__(self, name, codebase, steps, params):
        self._name = name
        self._codebase = codebase
        self._steps = steps
        self._params = params

    def replaceall(self, source):
        for param in self._params:
            source = param.replace(source)
        return source

    def name(self):
        return self.replaceall(self._name)

    def codebase(self):
        return self._codebase

    def steps(self):
        mapped_steps = []
        for step in self._steps :
            mapped_step = copy.deepcopy(step)
            if mapped_step["type"] in ("configure", "compile", "shell"):
                mapped_step["command"] = map(lambda argv: self.replaceall(argv), step["command"])
            mapped_steps.append(mapped_step)
        return mapped_steps


# Stores a project, which consists of many targets.  This class is
# responsible for the logic that converts a 
class Project:
    def __init__(self, config):
        self._name = config["name"]
        self._env = config["env"] if 'env' in config else None
        self._artifactory = config["artifactory"] if "artifactory" in config else None
        self._codebases = dict()
        self._targets = list()

	# TODO: Register codebase to buildbot master
        for __codebase in config["codebases"]:
            for name, v in __codebase.iteritems():
                branch = v["branch"] if 'branch' in v else "master"
                url = v['url']

                self.addCodebase(name, branch, url)
                _codebase = self.getCodebaseByName(name)
                # First we build up the list of targets -- note that these
                # aren't quite fully-fledged yet, as they don't have things
                # like the set of features that are required in order to build
                # them,
                if not 'configurations' in v:
                    continue

                for configuration in v["configurations"]:
                    name = configuration["name"]
                    steps = configuration["steps"]
                    print "Parsing configuration {}".format(name)
                    parameters = list()
                    for parameter in configuration["parameters"]:
                        pvpairs = list()
                        pattern = parameter["pattern"]
                        for value in parameter["values"]:
                            pvpairs.append(Parameter(pattern, value))
                        parameters.append(pvpairs)

                    for params in itertools.product(*parameters):
                        target = Target(name, _codebase, steps, params)
                        self._targets.append(target)

    def getCodebases(self):
        return self._codebases

    def getCodebaseByName(self, name):
        if name in self.getCodebases():
            return self.getCodebases()[name]
        else:
            return None


    def addCodebase(self, name, branch, url):
        self.getCodebases()[name] =  {
            'branch' : branch,
            'repository' : url,
        }
        print "Adding codebase {}, url: {}, branch: {}".format(name, url, branch)


    def name(self):
        return self._name

    def url(self):
        return self._url

    def env(self):
        return self._env

    def artifactory(self):
        return self._artifactory

    def targets(self):
        return self._targets

    def target_name(self, target):
        return self.name() + "@" + target.name()

    def all_target_names(self):
        return map(lambda target: self.target_name(target),
                   self.targets())

    def find_matching_slaves(self, slave_list):
        return slave_list.slaves()


# The list of all projects, pretty much just a way to collect them all
# somewhere in a way that parses its own directory format.
class ProjectList:
    def __init__(self, directory):
        self._projects = list()

        for filename in os.listdir(directory):
            if filename.endswith(".json"):
                print "Loading project config " + filename
                lines = open(directory + filename).read()
                project = Project(json.loads(lines))
                self._projects.append(project)

    def projects(self):
        return self._projects

    def targets(self):
        for project in self.projects():
            for target in project.targets():
                yield target

# Contains the list of status reports that should be installed
class Report:
    def __init__(self, config):
        self._type     = config["type"]
        if self.type() == "smtp":
            self._faddr    = config["from"]
            self._username = config["username"]
            self._password = config["password"]
            self._relay    = config["relay"]
        elif self.type() == "sendmail":
            self._faddr    = config["from"]
        elif self.type() == "http":
            self._port     = config["port"]
        else:
            print "Unknown report type " + self.type()
            abort

    def type(self):
        return self._type

    def faddr(self):
        return self._faddr

    def username(self):
        return self._username

    def password(self):
        return self._password

    def relay(self):
        return self._relay

    def port(self):
        return int(self._port)

class ReportList:
    def __init__(self, directory):
        self._reports = list()

        for filename in os.listdir(directory):
            if filename.endswith(".json"):
                print "Loading report config " + filename
                lines = open(directory + filename).read()
                report = Report(json.loads(lines))
                self._reports.append(report)

    def reports(self):
        return self._reports

class ForceList:
    def __init__(self, filename):
        self._forces = list()

        print "Loading force config " + filename
        lines = open(filename).read()
        projects = json.loads(lines)
        self._forces = projects["projects"]

    def should_force(self, project_name):
        if self._forces == "*":
            return True
        return project_name in self._forces

slave_list = SlaveList("config/slaves/")
project_list = ProjectList("config/projects/")
report_list = ReportList("config/reports/")
force_list = ForceList("config/force.json")

for report in report_list.reports():
    if report.type() == "email":
        print "report " + report.faddr()
    if report.type() == "http":
        print "report " + str(report.port())

for target in project_list.targets():
    print "target " + target.name()
#    print target.steps()

from buildbot.changes.gitpoller import GitPoller
from buildbot.worker import Worker
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.schedulers.timed import Nightly
from buildbot.www import authz
from buildbot.plugins import reporters, util, steps
#from buildbot.process.results import SUCCESS, WARNINGS, FAILURE

c = BuildmasterConfig = {}

c['title'] = "Xavier's Buildbot"
c['titleURL'] = "{}".format(socket.getfqdn())
c['buildbotURL'] = "http://{}:8010/".format(socket.getfqdn())


c['protocols'] = {'pb': {'port': 9989}}

# buildbot requires a flatened format for all its configuration
# entries, with some strings that serve as links between the various
# sections.  This builds up that format.
c['change_source'] = []
c['workers'] = []
c['builders'] = []
c['schedulers'] = []

c['buildbotNetUsageData']= None

from buildbot.process.users import manual
c['user_managers'] = []
c['user_managers'].append(manual.CommandlineUserManager(username="buildbot",
                                                      passwd="buildbot",
                                                      port=9990))

all_repositories = {}
def codebaseGenerator(chdict):
	print"codebase generator: input {}, codebase {}".format(chdict, all_repositories[chdict['repository']])
	return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator
c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}


authz_cfg=authz.Authz()

# slaves don't have any links at all, so they're pretty
# stright-forward -- we just output the whole list of slaves.
for slave in slave_list.slaves():
    c['workers'].append(
        Worker(
            slave.hostname(),
            slave.password(),
            max_builds=2
        )
    )

# builders map directly to targets, but since targets don't have everything
for project in project_list.projects():
    name = project.name()
    codebases = project.getCodebases()
    factory = BuildFactory()
    for k, v in codebases.iteritems():
        if v['repository'] not in all_repositories:
            all_repositories[v['repository']] = k
            c['change_source'].append(
                GitPoller(
                    repourl= v['repository'],
                    workdir="gitpoller-{}".format(k),
                    branches=[v['branch']],
                    project = name,
                    pollinterval=600,
                    pollAtLaunch=True,
                    usetimestamps = False,
                )
            )

    print "codebases: {}".format(codebases)
    print "all_repositories: {}".format(all_repositories)

    for target in project.targets():
        codebase = target.codebase()
        codebaseName = codebaseGenerator(codebase)
#	print "codebase {}, codebasename {}".format(codebase, codebaseName)
        for step in target.steps():
                workdir = codebaseName if 'workdir' not in step else step['workdir']
		if step['type'] ==  'git':
			factory.addStep(
				Git(
                                        name='{}: git {} {}'.format(target.name(), codebaseName, codebase['repository']),
					repourl=codebase['repository'],
					codebase=codebaseName,
					mode='full',
					haltOnFailure = True,
					getDescription = True,
					submodules = True if 'submodules' in step else False,
					description="fetch-{}".format(codebaseName),
					descriptionDone="fetch-{}".format(codebaseName),
					env= project.env(),
					workdir=workdir,
#					alwaysUseLatest = True,
					timeout = 60 * 40,
				)
			)

		if step['type'] ==  'configure':
			factory.addStep(
				steps.Configure(
					command = step['command'],
                                        name='configure {}'.format(target.name()),
					workdir = workdir,
					env= project.env(),
					haltOnFailure = True,
					description = "configure-{}".format(target.name()),
                                        flunkOnWarnings = True if 'flunkOnWarnings' in step else False,
                                        warnOnWarnings = True if 'warnOnWarnings' in step else False,

				)
			)

		if step['type'] ==  'compile':
			factory.addStep(
				steps.Compile(
					command = step['command'],
                                        name='compile {}'.format(target.name()),
					workdir = workdir,
					env= project.env(),
					haltOnFailure = True,
					description = "compile-{}".format(target.name()),
                                        flunkOnWarnings = True if 'flunkOnWarnings' in step else False,
                                        warnOnWarnings = True if 'warnOnWarnings' in step else False,
				)
			)

		if step['type'] ==  'shell':
			factory.addStep(
				steps.ShellCommand(
					command = step['command'],
                                        name='shell {}'.format(target.name()),
					workdir = workdir,
					env= project.env(),
                                        flunkOnWarnings = True if 'flunkOnWarnings' in step else False,
                                        warnOnWarnings = True if 'warnOnWarnings' in step else False,
				)
			)

		if step['type'] ==  'publish':
                    _artifactory = project.artifactory()
                    if _artifactory is None:
                        continue
                        if 'files' in step:
                            factory.addStep(
                                steps.MultipleFileUpload(
                                    workersrc = step['files'],
                                    masterdest = "{}/".format(_artifactory),
                                    description = "artifactory {}".format(' '.join(step['files'])),
                                    workdir = workdir,
                                    mode = 0644,
                                )
                        )
                        if 'dirs' in step:
                            for k, v in step['dirs'].iteritems():
                                _archive = "{}".format(v)
                                _command = ['tar', '-C', "{}".format(k), '-jcvf', _archive, '.']
                                factory.addStep(
                                            steps.ShellCommand(
                                                command = _command,
                                                name='archive {}'.format(k),
                                                workdir = workdir,
                                                env= project.env(),
                                                flunkOnWarnings = True if 'flunkOnWarnings' in step else False,
                                                warnOnWarnings = True if 'warnOnWarnings' in step else False,
                                        )
                                )
                                factory.addStep(
                                    steps.FileUpload(
                                        workersrc = _archive,
                                        masterdest = "{}/{}".format(_artifactory, _archive),
                                        description = "artifactory {}".format(k),
                                        workdir = workdir,
                                        mode = 0644,
                                    )
                                )
                                factory.addStep(
                                    steps.ShellCommand(
                                            command = ['rm', '-f', '{}'.format(_archive)],
                                            name='cleanup {}'.format(k),
                                            workdir = workdir,
                                            env= project.env(),
                                            flunkOnWarnings = True if 'flunkOnWarnings' in step else False,
                                            warnOnWarnings = True if 'warnOnWarnings' in step else False,
                                    )
                                )

    slaves = map(
        lambda s: s.hostname(),
        project.find_matching_slaves(slave_list)
    )

    c['schedulers'].append(
        AnyBranchScheduler(
            name=name,
            treeStableTimer = 30,
            builderNames=["{}-builder".format(name)],
            codebases = codebases,
            change_filter=ChangeFilter(
                project = [name],
            ),
        )
    )
    c['schedulers'].append(
        ForceScheduler(
            name="{}-force".format(name),
            builderNames=["{}-builder".format(name)],
            codebases = codebases.keys(),
        )
    )

    c['builders'].append(
        BuilderConfig(
            name       = "{}-builder".format(name),
            workernames = slaves,
            factory    = factory
        )
    )

# Installs email handlers
for report in report_list.reports():
    if report.type() == "smtp":
        c['services'].append(
            MailNotifier(
                mode                  = ('failing',),
                fromaddr              = report.faddr(),
                sendToInterestedUsers = True,
                relayhost             = report.relay(),
                smtpPort              = 587,
                smtpUser              = report.username(),
                smtpPassword          = report.password(),
                )
            )

    if report.type() == "sendmail":
        c['services'].append(
            MailNotifier(
                mode                  = ('failing',),
                fromaddr              = report.faddr(),
                sendToInterestedUsers = True,
                )
            )

    if report.type() == "http":
        c['www'] = dict(
                port = report.port(),
                plugins=dict(
                    waterfall_view={},
                    console_view={},
                ),
                auth=util.UserPasswordAuth({"buildbot":"buildbot"}),
            )

